# Keeping our existing Nginx and Httpd deployments and services
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx-app
  template:
    metadata:
      labels:
        app: nginx-app
    spec:
      containers:
      - name: nginx
        image: nginx:latest
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  selector:
    app: nginx-app
  ports:
  - port: 80
    targetPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: httpd-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: httpd-app
  template:
    metadata:
      labels:
        app: httpd-app
    spec:
      containers:
      - name: httpd
        image: httpd:latest
---
apiVersion: v1
kind: Service
metadata:
  name: httpd-service
spec:
  selector:
    app: httpd-app
  ports:
  - port: 80
    targetPort: 80
---
# Adding Flask application
# Flask application with replica identification
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-app
spec:
  replicas: 3    # Changed to 3 replicas
  selector:
    matchLabels:
      app: flask-app
  template:
    metadata:
      labels:
        app: flask-app
    spec:
      containers:
      - name: flask
        image: python:3.9-slim
        command: ["sh", "-c"]
        args:
          - |
            pip install flask
            echo 'from flask import Flask
            import socket
            import os
            
            app = Flask(__name__)
            
            @app.route("/")
            def hello():
                pod_name = os.environ.get("HOSTNAME", "unknown")
                return f"Hello from Flask! Served by Pod: {pod_name}"
                
            if __name__ == "__main__":
                app.run(host="0.0.0.0", port=5000)' > app.py
            python app.py
---
apiVersion: v1
kind: Service
metadata:
  name: flask-service
spec:
  type: LoadBalancer    # Changed to LoadBalancer
  selector:
    app: flask-app
  ports:
  - port: 80
    targetPort: 5000
---
# Updated Ingress with path rewriting
# Updated Ingress for Traefik
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: multi-ingress
  annotations:
    traefik.ingress.kubernetes.io/router.middlewares: default-strip-prefix@kubernetescrd
spec:
  rules:
  - http:
      paths:
      - path: /nginx
        pathType: Prefix
        backend:
          service:
            name: nginx-service
            port:
              number: 80
      - path: /httpd
        pathType: Prefix
        backend:
          service:
            name: httpd-service
            port:
              number: 80
      - path: /flask
        pathType: Prefix
        backend:
          service:
            name: flask-service
            port:
              number: 80
---
# Strip prefix middleware
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: strip-prefix
spec:
  stripPrefix:
    prefixes:
      - /nginx
      - /httpd
      - /flask

